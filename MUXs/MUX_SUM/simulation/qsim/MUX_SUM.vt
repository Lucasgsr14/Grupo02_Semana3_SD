// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/06/2021 14:04:21"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    MUX_SUM
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MUX_SUM_vlg_sample_tst(
	enable,
	REG_ADD,
	REG_SUB,
	S3,
	sampler_tx
);
input  enable;
input [7:0] REG_ADD;
input [7:0] REG_SUB;
input  S3;
output sampler_tx;

reg sample;
time current_time;
always @(enable or REG_ADD or REG_SUB or S3)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module MUX_SUM_vlg_check_tst (
	OUT_REG,
	sampler_rx
);
input [7:0] OUT_REG;
input sampler_rx;

reg [7:0] OUT_REG_expected;

reg [7:0] OUT_REG_prev;

reg [7:0] OUT_REG_expected_prev;

reg [7:0] last_OUT_REG_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:1] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 1'b1;
end

// update real /o prevs

always @(trigger)
begin
	OUT_REG_prev = OUT_REG;
end

// update expected /o prevs

always @(trigger)
begin
	OUT_REG_expected_prev = OUT_REG_expected;
end


// expected OUT_REG[ 7 ]
initial
begin
	OUT_REG_expected[7] = 1'bX;
end 
// expected OUT_REG[ 6 ]
initial
begin
	OUT_REG_expected[6] = 1'bX;
end 
// expected OUT_REG[ 5 ]
initial
begin
	OUT_REG_expected[5] = 1'bX;
end 
// expected OUT_REG[ 4 ]
initial
begin
	OUT_REG_expected[4] = 1'bX;
end 
// expected OUT_REG[ 3 ]
initial
begin
	OUT_REG_expected[3] = 1'bX;
end 
// expected OUT_REG[ 2 ]
initial
begin
	OUT_REG_expected[2] = 1'bX;
end 
// expected OUT_REG[ 1 ]
initial
begin
	OUT_REG_expected[1] = 1'bX;
end 
// expected OUT_REG[ 0 ]
initial
begin
	OUT_REG_expected[0] = 1'bX;
end 
// generate trigger
always @(OUT_REG_expected or OUT_REG)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected OUT_REG = %b | ",OUT_REG_expected_prev);
	$display("| real OUT_REG = %b | ",OUT_REG_prev);
`endif
	if (
		( OUT_REG_expected_prev[0] !== 1'bx ) && ( OUT_REG_prev[0] !== OUT_REG_expected_prev[0] )
		&& ((OUT_REG_expected_prev[0] !== last_OUT_REG_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_REG[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_REG_expected_prev);
		$display ("     Real value = %b", OUT_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_REG_exp[0] = OUT_REG_expected_prev[0];
	end
	if (
		( OUT_REG_expected_prev[1] !== 1'bx ) && ( OUT_REG_prev[1] !== OUT_REG_expected_prev[1] )
		&& ((OUT_REG_expected_prev[1] !== last_OUT_REG_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_REG[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_REG_expected_prev);
		$display ("     Real value = %b", OUT_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_REG_exp[1] = OUT_REG_expected_prev[1];
	end
	if (
		( OUT_REG_expected_prev[2] !== 1'bx ) && ( OUT_REG_prev[2] !== OUT_REG_expected_prev[2] )
		&& ((OUT_REG_expected_prev[2] !== last_OUT_REG_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_REG[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_REG_expected_prev);
		$display ("     Real value = %b", OUT_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_REG_exp[2] = OUT_REG_expected_prev[2];
	end
	if (
		( OUT_REG_expected_prev[3] !== 1'bx ) && ( OUT_REG_prev[3] !== OUT_REG_expected_prev[3] )
		&& ((OUT_REG_expected_prev[3] !== last_OUT_REG_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_REG[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_REG_expected_prev);
		$display ("     Real value = %b", OUT_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_REG_exp[3] = OUT_REG_expected_prev[3];
	end
	if (
		( OUT_REG_expected_prev[4] !== 1'bx ) && ( OUT_REG_prev[4] !== OUT_REG_expected_prev[4] )
		&& ((OUT_REG_expected_prev[4] !== last_OUT_REG_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_REG[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_REG_expected_prev);
		$display ("     Real value = %b", OUT_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_REG_exp[4] = OUT_REG_expected_prev[4];
	end
	if (
		( OUT_REG_expected_prev[5] !== 1'bx ) && ( OUT_REG_prev[5] !== OUT_REG_expected_prev[5] )
		&& ((OUT_REG_expected_prev[5] !== last_OUT_REG_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_REG[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_REG_expected_prev);
		$display ("     Real value = %b", OUT_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_REG_exp[5] = OUT_REG_expected_prev[5];
	end
	if (
		( OUT_REG_expected_prev[6] !== 1'bx ) && ( OUT_REG_prev[6] !== OUT_REG_expected_prev[6] )
		&& ((OUT_REG_expected_prev[6] !== last_OUT_REG_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_REG[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_REG_expected_prev);
		$display ("     Real value = %b", OUT_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_REG_exp[6] = OUT_REG_expected_prev[6];
	end
	if (
		( OUT_REG_expected_prev[7] !== 1'bx ) && ( OUT_REG_prev[7] !== OUT_REG_expected_prev[7] )
		&& ((OUT_REG_expected_prev[7] !== last_OUT_REG_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUT_REG[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUT_REG_expected_prev);
		$display ("     Real value = %b", OUT_REG_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_OUT_REG_exp[7] = OUT_REG_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module MUX_SUM_vlg_vec_tst();
// constants                                           
// general purpose registers
reg enable;
reg [7:0] REG_ADD;
reg [7:0] REG_SUB;
reg S3;
// wires                                               
wire [7:0] OUT_REG;

wire sampler;                             

// assign statements (if any)                          
MUX_SUM i1 (
// port map - connection between master ports and signals/registers   
	.enable(enable),
	.OUT_REG(OUT_REG),
	.REG_ADD(REG_ADD),
	.REG_SUB(REG_SUB),
	.S3(S3)
);

// enable
always
begin
	enable = 1'b0;
	enable = #250000 1'b1;
	#250000;
end 

// S3
always
begin
	S3 = 1'b0;
	S3 = #25000 1'b1;
	#25000;
end 
// REG_ADD[ 7 ]
initial
begin
	REG_ADD[7] = 1'b1;
end 
// REG_ADD[ 6 ]
initial
begin
	REG_ADD[6] = 1'b0;
end 
// REG_ADD[ 5 ]
initial
begin
	REG_ADD[5] = 1'b1;
end 
// REG_ADD[ 4 ]
initial
begin
	REG_ADD[4] = 1'b0;
end 
// REG_ADD[ 3 ]
initial
begin
	REG_ADD[3] = 1'b1;
end 
// REG_ADD[ 2 ]
initial
begin
	REG_ADD[2] = 1'b0;
end 
// REG_ADD[ 1 ]
initial
begin
	REG_ADD[1] = 1'b1;
end 
// REG_ADD[ 0 ]
initial
begin
	REG_ADD[0] = 1'b0;
end 
// REG_SUB[ 7 ]
initial
begin
	REG_SUB[7] = 1'b0;
end 
// REG_SUB[ 6 ]
initial
begin
	REG_SUB[6] = 1'b1;
end 
// REG_SUB[ 5 ]
initial
begin
	REG_SUB[5] = 1'b0;
end 
// REG_SUB[ 4 ]
initial
begin
	REG_SUB[4] = 1'b1;
end 
// REG_SUB[ 3 ]
initial
begin
	REG_SUB[3] = 1'b0;
end 
// REG_SUB[ 2 ]
initial
begin
	REG_SUB[2] = 1'b1;
end 
// REG_SUB[ 1 ]
initial
begin
	REG_SUB[1] = 1'b0;
end 
// REG_SUB[ 0 ]
initial
begin
	REG_SUB[0] = 1'b1;
end 

MUX_SUM_vlg_sample_tst tb_sample (
	.enable(enable),
	.REG_ADD(REG_ADD),
	.REG_SUB(REG_SUB),
	.S3(S3),
	.sampler_tx(sampler)
);

MUX_SUM_vlg_check_tst tb_out(
	.OUT_REG(OUT_REG),
	.sampler_rx(sampler)
);
endmodule

