// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/06/2021 11:36:48"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DEMUX_REG
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DEMUX_REG_vlg_sample_tst(
	enable,
	IN_REG,
	s0,
	s1,
	s2,
	sampler_tx
);
input  enable;
input [7:0] IN_REG;
input  s0;
input  s1;
input  s2;
output sampler_tx;

reg sample;
time current_time;
always @(enable or IN_REG or s0 or s1 or s2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DEMUX_REG_vlg_check_tst (
	REG_ADD,
	REG_AND,
	REG_CMP,
	REG_NOT,
	REG_OR,
	REG_SUB,
	REG_XOR,
	sampler_rx
);
input [7:0] REG_ADD;
input [7:0] REG_AND;
input [7:0] REG_CMP;
input [7:0] REG_NOT;
input [7:0] REG_OR;
input [7:0] REG_SUB;
input [7:0] REG_XOR;
input sampler_rx;

reg [7:0] REG_ADD_expected;
reg [7:0] REG_AND_expected;
reg [7:0] REG_CMP_expected;
reg [7:0] REG_NOT_expected;
reg [7:0] REG_OR_expected;
reg [7:0] REG_SUB_expected;
reg [7:0] REG_XOR_expected;

reg [7:0] REG_ADD_prev;
reg [7:0] REG_AND_prev;
reg [7:0] REG_CMP_prev;
reg [7:0] REG_NOT_prev;
reg [7:0] REG_OR_prev;
reg [7:0] REG_SUB_prev;
reg [7:0] REG_XOR_prev;

reg [7:0] REG_ADD_expected_prev;
reg [7:0] REG_AND_expected_prev;
reg [7:0] REG_CMP_expected_prev;
reg [7:0] REG_NOT_expected_prev;
reg [7:0] REG_OR_expected_prev;
reg [7:0] REG_SUB_expected_prev;
reg [7:0] REG_XOR_expected_prev;

reg [7:0] last_REG_ADD_exp;
reg [7:0] last_REG_AND_exp;
reg [7:0] last_REG_CMP_exp;
reg [7:0] last_REG_NOT_exp;
reg [7:0] last_REG_OR_exp;
reg [7:0] last_REG_SUB_exp;
reg [7:0] last_REG_XOR_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	REG_ADD_prev = REG_ADD;
	REG_AND_prev = REG_AND;
	REG_CMP_prev = REG_CMP;
	REG_NOT_prev = REG_NOT;
	REG_OR_prev = REG_OR;
	REG_SUB_prev = REG_SUB;
	REG_XOR_prev = REG_XOR;
end

// update expected /o prevs

always @(trigger)
begin
	REG_ADD_expected_prev = REG_ADD_expected;
	REG_AND_expected_prev = REG_AND_expected;
	REG_CMP_expected_prev = REG_CMP_expected;
	REG_NOT_expected_prev = REG_NOT_expected;
	REG_OR_expected_prev = REG_OR_expected;
	REG_SUB_expected_prev = REG_SUB_expected;
	REG_XOR_expected_prev = REG_XOR_expected;
end


// expected REG_ADD[ 7 ]
initial
begin
	REG_ADD_expected[7] = 1'bX;
end 
// expected REG_ADD[ 6 ]
initial
begin
	REG_ADD_expected[6] = 1'bX;
end 
// expected REG_ADD[ 5 ]
initial
begin
	REG_ADD_expected[5] = 1'bX;
end 
// expected REG_ADD[ 4 ]
initial
begin
	REG_ADD_expected[4] = 1'bX;
end 
// expected REG_ADD[ 3 ]
initial
begin
	REG_ADD_expected[3] = 1'bX;
end 
// expected REG_ADD[ 2 ]
initial
begin
	REG_ADD_expected[2] = 1'bX;
end 
// expected REG_ADD[ 1 ]
initial
begin
	REG_ADD_expected[1] = 1'bX;
end 
// expected REG_ADD[ 0 ]
initial
begin
	REG_ADD_expected[0] = 1'bX;
end 
// expected REG_AND[ 7 ]
initial
begin
	REG_AND_expected[7] = 1'bX;
end 
// expected REG_AND[ 6 ]
initial
begin
	REG_AND_expected[6] = 1'bX;
end 
// expected REG_AND[ 5 ]
initial
begin
	REG_AND_expected[5] = 1'bX;
end 
// expected REG_AND[ 4 ]
initial
begin
	REG_AND_expected[4] = 1'bX;
end 
// expected REG_AND[ 3 ]
initial
begin
	REG_AND_expected[3] = 1'bX;
end 
// expected REG_AND[ 2 ]
initial
begin
	REG_AND_expected[2] = 1'bX;
end 
// expected REG_AND[ 1 ]
initial
begin
	REG_AND_expected[1] = 1'bX;
end 
// expected REG_AND[ 0 ]
initial
begin
	REG_AND_expected[0] = 1'bX;
end 
// expected REG_CMP[ 7 ]
initial
begin
	REG_CMP_expected[7] = 1'bX;
end 
// expected REG_CMP[ 6 ]
initial
begin
	REG_CMP_expected[6] = 1'bX;
end 
// expected REG_CMP[ 5 ]
initial
begin
	REG_CMP_expected[5] = 1'bX;
end 
// expected REG_CMP[ 4 ]
initial
begin
	REG_CMP_expected[4] = 1'bX;
end 
// expected REG_CMP[ 3 ]
initial
begin
	REG_CMP_expected[3] = 1'bX;
end 
// expected REG_CMP[ 2 ]
initial
begin
	REG_CMP_expected[2] = 1'bX;
end 
// expected REG_CMP[ 1 ]
initial
begin
	REG_CMP_expected[1] = 1'bX;
end 
// expected REG_CMP[ 0 ]
initial
begin
	REG_CMP_expected[0] = 1'bX;
end 
// expected REG_NOT[ 7 ]
initial
begin
	REG_NOT_expected[7] = 1'bX;
end 
// expected REG_NOT[ 6 ]
initial
begin
	REG_NOT_expected[6] = 1'bX;
end 
// expected REG_NOT[ 5 ]
initial
begin
	REG_NOT_expected[5] = 1'bX;
end 
// expected REG_NOT[ 4 ]
initial
begin
	REG_NOT_expected[4] = 1'bX;
end 
// expected REG_NOT[ 3 ]
initial
begin
	REG_NOT_expected[3] = 1'bX;
end 
// expected REG_NOT[ 2 ]
initial
begin
	REG_NOT_expected[2] = 1'bX;
end 
// expected REG_NOT[ 1 ]
initial
begin
	REG_NOT_expected[1] = 1'bX;
end 
// expected REG_NOT[ 0 ]
initial
begin
	REG_NOT_expected[0] = 1'bX;
end 
// expected REG_OR[ 7 ]
initial
begin
	REG_OR_expected[7] = 1'bX;
end 
// expected REG_OR[ 6 ]
initial
begin
	REG_OR_expected[6] = 1'bX;
end 
// expected REG_OR[ 5 ]
initial
begin
	REG_OR_expected[5] = 1'bX;
end 
// expected REG_OR[ 4 ]
initial
begin
	REG_OR_expected[4] = 1'bX;
end 
// expected REG_OR[ 3 ]
initial
begin
	REG_OR_expected[3] = 1'bX;
end 
// expected REG_OR[ 2 ]
initial
begin
	REG_OR_expected[2] = 1'bX;
end 
// expected REG_OR[ 1 ]
initial
begin
	REG_OR_expected[1] = 1'bX;
end 
// expected REG_OR[ 0 ]
initial
begin
	REG_OR_expected[0] = 1'bX;
end 
// expected REG_SUB[ 7 ]
initial
begin
	REG_SUB_expected[7] = 1'bX;
end 
// expected REG_SUB[ 6 ]
initial
begin
	REG_SUB_expected[6] = 1'bX;
end 
// expected REG_SUB[ 5 ]
initial
begin
	REG_SUB_expected[5] = 1'bX;
end 
// expected REG_SUB[ 4 ]
initial
begin
	REG_SUB_expected[4] = 1'bX;
end 
// expected REG_SUB[ 3 ]
initial
begin
	REG_SUB_expected[3] = 1'bX;
end 
// expected REG_SUB[ 2 ]
initial
begin
	REG_SUB_expected[2] = 1'bX;
end 
// expected REG_SUB[ 1 ]
initial
begin
	REG_SUB_expected[1] = 1'bX;
end 
// expected REG_SUB[ 0 ]
initial
begin
	REG_SUB_expected[0] = 1'bX;
end 
// expected REG_XOR[ 7 ]
initial
begin
	REG_XOR_expected[7] = 1'bX;
end 
// expected REG_XOR[ 6 ]
initial
begin
	REG_XOR_expected[6] = 1'bX;
end 
// expected REG_XOR[ 5 ]
initial
begin
	REG_XOR_expected[5] = 1'bX;
end 
// expected REG_XOR[ 4 ]
initial
begin
	REG_XOR_expected[4] = 1'bX;
end 
// expected REG_XOR[ 3 ]
initial
begin
	REG_XOR_expected[3] = 1'bX;
end 
// expected REG_XOR[ 2 ]
initial
begin
	REG_XOR_expected[2] = 1'bX;
end 
// expected REG_XOR[ 1 ]
initial
begin
	REG_XOR_expected[1] = 1'bX;
end 
// expected REG_XOR[ 0 ]
initial
begin
	REG_XOR_expected[0] = 1'bX;
end 
// generate trigger
always @(REG_ADD_expected or REG_ADD or REG_AND_expected or REG_AND or REG_CMP_expected or REG_CMP or REG_NOT_expected or REG_NOT or REG_OR_expected or REG_OR or REG_SUB_expected or REG_SUB or REG_XOR_expected or REG_XOR)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected REG_ADD = %b | expected REG_AND = %b | expected REG_CMP = %b | expected REG_NOT = %b | expected REG_OR = %b | expected REG_SUB = %b | expected REG_XOR = %b | ",REG_ADD_expected_prev,REG_AND_expected_prev,REG_CMP_expected_prev,REG_NOT_expected_prev,REG_OR_expected_prev,REG_SUB_expected_prev,REG_XOR_expected_prev);
	$display("| real REG_ADD = %b | real REG_AND = %b | real REG_CMP = %b | real REG_NOT = %b | real REG_OR = %b | real REG_SUB = %b | real REG_XOR = %b | ",REG_ADD_prev,REG_AND_prev,REG_CMP_prev,REG_NOT_prev,REG_OR_prev,REG_SUB_prev,REG_XOR_prev);
`endif
	if (
		( REG_ADD_expected_prev[0] !== 1'bx ) && ( REG_ADD_prev[0] !== REG_ADD_expected_prev[0] )
		&& ((REG_ADD_expected_prev[0] !== last_REG_ADD_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_ADD[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_ADD_expected_prev);
		$display ("     Real value = %b", REG_ADD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_REG_ADD_exp[0] = REG_ADD_expected_prev[0];
	end
	if (
		( REG_ADD_expected_prev[1] !== 1'bx ) && ( REG_ADD_prev[1] !== REG_ADD_expected_prev[1] )
		&& ((REG_ADD_expected_prev[1] !== last_REG_ADD_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_ADD[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_ADD_expected_prev);
		$display ("     Real value = %b", REG_ADD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_REG_ADD_exp[1] = REG_ADD_expected_prev[1];
	end
	if (
		( REG_ADD_expected_prev[2] !== 1'bx ) && ( REG_ADD_prev[2] !== REG_ADD_expected_prev[2] )
		&& ((REG_ADD_expected_prev[2] !== last_REG_ADD_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_ADD[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_ADD_expected_prev);
		$display ("     Real value = %b", REG_ADD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_REG_ADD_exp[2] = REG_ADD_expected_prev[2];
	end
	if (
		( REG_ADD_expected_prev[3] !== 1'bx ) && ( REG_ADD_prev[3] !== REG_ADD_expected_prev[3] )
		&& ((REG_ADD_expected_prev[3] !== last_REG_ADD_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_ADD[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_ADD_expected_prev);
		$display ("     Real value = %b", REG_ADD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_REG_ADD_exp[3] = REG_ADD_expected_prev[3];
	end
	if (
		( REG_ADD_expected_prev[4] !== 1'bx ) && ( REG_ADD_prev[4] !== REG_ADD_expected_prev[4] )
		&& ((REG_ADD_expected_prev[4] !== last_REG_ADD_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_ADD[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_ADD_expected_prev);
		$display ("     Real value = %b", REG_ADD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_REG_ADD_exp[4] = REG_ADD_expected_prev[4];
	end
	if (
		( REG_ADD_expected_prev[5] !== 1'bx ) && ( REG_ADD_prev[5] !== REG_ADD_expected_prev[5] )
		&& ((REG_ADD_expected_prev[5] !== last_REG_ADD_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_ADD[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_ADD_expected_prev);
		$display ("     Real value = %b", REG_ADD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_REG_ADD_exp[5] = REG_ADD_expected_prev[5];
	end
	if (
		( REG_ADD_expected_prev[6] !== 1'bx ) && ( REG_ADD_prev[6] !== REG_ADD_expected_prev[6] )
		&& ((REG_ADD_expected_prev[6] !== last_REG_ADD_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_ADD[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_ADD_expected_prev);
		$display ("     Real value = %b", REG_ADD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_REG_ADD_exp[6] = REG_ADD_expected_prev[6];
	end
	if (
		( REG_ADD_expected_prev[7] !== 1'bx ) && ( REG_ADD_prev[7] !== REG_ADD_expected_prev[7] )
		&& ((REG_ADD_expected_prev[7] !== last_REG_ADD_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_ADD[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_ADD_expected_prev);
		$display ("     Real value = %b", REG_ADD_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_REG_ADD_exp[7] = REG_ADD_expected_prev[7];
	end
	if (
		( REG_AND_expected_prev[0] !== 1'bx ) && ( REG_AND_prev[0] !== REG_AND_expected_prev[0] )
		&& ((REG_AND_expected_prev[0] !== last_REG_AND_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_AND[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_AND_expected_prev);
		$display ("     Real value = %b", REG_AND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_REG_AND_exp[0] = REG_AND_expected_prev[0];
	end
	if (
		( REG_AND_expected_prev[1] !== 1'bx ) && ( REG_AND_prev[1] !== REG_AND_expected_prev[1] )
		&& ((REG_AND_expected_prev[1] !== last_REG_AND_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_AND[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_AND_expected_prev);
		$display ("     Real value = %b", REG_AND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_REG_AND_exp[1] = REG_AND_expected_prev[1];
	end
	if (
		( REG_AND_expected_prev[2] !== 1'bx ) && ( REG_AND_prev[2] !== REG_AND_expected_prev[2] )
		&& ((REG_AND_expected_prev[2] !== last_REG_AND_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_AND[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_AND_expected_prev);
		$display ("     Real value = %b", REG_AND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_REG_AND_exp[2] = REG_AND_expected_prev[2];
	end
	if (
		( REG_AND_expected_prev[3] !== 1'bx ) && ( REG_AND_prev[3] !== REG_AND_expected_prev[3] )
		&& ((REG_AND_expected_prev[3] !== last_REG_AND_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_AND[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_AND_expected_prev);
		$display ("     Real value = %b", REG_AND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_REG_AND_exp[3] = REG_AND_expected_prev[3];
	end
	if (
		( REG_AND_expected_prev[4] !== 1'bx ) && ( REG_AND_prev[4] !== REG_AND_expected_prev[4] )
		&& ((REG_AND_expected_prev[4] !== last_REG_AND_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_AND[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_AND_expected_prev);
		$display ("     Real value = %b", REG_AND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_REG_AND_exp[4] = REG_AND_expected_prev[4];
	end
	if (
		( REG_AND_expected_prev[5] !== 1'bx ) && ( REG_AND_prev[5] !== REG_AND_expected_prev[5] )
		&& ((REG_AND_expected_prev[5] !== last_REG_AND_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_AND[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_AND_expected_prev);
		$display ("     Real value = %b", REG_AND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_REG_AND_exp[5] = REG_AND_expected_prev[5];
	end
	if (
		( REG_AND_expected_prev[6] !== 1'bx ) && ( REG_AND_prev[6] !== REG_AND_expected_prev[6] )
		&& ((REG_AND_expected_prev[6] !== last_REG_AND_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_AND[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_AND_expected_prev);
		$display ("     Real value = %b", REG_AND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_REG_AND_exp[6] = REG_AND_expected_prev[6];
	end
	if (
		( REG_AND_expected_prev[7] !== 1'bx ) && ( REG_AND_prev[7] !== REG_AND_expected_prev[7] )
		&& ((REG_AND_expected_prev[7] !== last_REG_AND_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_AND[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_AND_expected_prev);
		$display ("     Real value = %b", REG_AND_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_REG_AND_exp[7] = REG_AND_expected_prev[7];
	end
	if (
		( REG_CMP_expected_prev[0] !== 1'bx ) && ( REG_CMP_prev[0] !== REG_CMP_expected_prev[0] )
		&& ((REG_CMP_expected_prev[0] !== last_REG_CMP_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_CMP[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_CMP_expected_prev);
		$display ("     Real value = %b", REG_CMP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_REG_CMP_exp[0] = REG_CMP_expected_prev[0];
	end
	if (
		( REG_CMP_expected_prev[1] !== 1'bx ) && ( REG_CMP_prev[1] !== REG_CMP_expected_prev[1] )
		&& ((REG_CMP_expected_prev[1] !== last_REG_CMP_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_CMP[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_CMP_expected_prev);
		$display ("     Real value = %b", REG_CMP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_REG_CMP_exp[1] = REG_CMP_expected_prev[1];
	end
	if (
		( REG_CMP_expected_prev[2] !== 1'bx ) && ( REG_CMP_prev[2] !== REG_CMP_expected_prev[2] )
		&& ((REG_CMP_expected_prev[2] !== last_REG_CMP_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_CMP[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_CMP_expected_prev);
		$display ("     Real value = %b", REG_CMP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_REG_CMP_exp[2] = REG_CMP_expected_prev[2];
	end
	if (
		( REG_CMP_expected_prev[3] !== 1'bx ) && ( REG_CMP_prev[3] !== REG_CMP_expected_prev[3] )
		&& ((REG_CMP_expected_prev[3] !== last_REG_CMP_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_CMP[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_CMP_expected_prev);
		$display ("     Real value = %b", REG_CMP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_REG_CMP_exp[3] = REG_CMP_expected_prev[3];
	end
	if (
		( REG_CMP_expected_prev[4] !== 1'bx ) && ( REG_CMP_prev[4] !== REG_CMP_expected_prev[4] )
		&& ((REG_CMP_expected_prev[4] !== last_REG_CMP_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_CMP[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_CMP_expected_prev);
		$display ("     Real value = %b", REG_CMP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_REG_CMP_exp[4] = REG_CMP_expected_prev[4];
	end
	if (
		( REG_CMP_expected_prev[5] !== 1'bx ) && ( REG_CMP_prev[5] !== REG_CMP_expected_prev[5] )
		&& ((REG_CMP_expected_prev[5] !== last_REG_CMP_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_CMP[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_CMP_expected_prev);
		$display ("     Real value = %b", REG_CMP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_REG_CMP_exp[5] = REG_CMP_expected_prev[5];
	end
	if (
		( REG_CMP_expected_prev[6] !== 1'bx ) && ( REG_CMP_prev[6] !== REG_CMP_expected_prev[6] )
		&& ((REG_CMP_expected_prev[6] !== last_REG_CMP_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_CMP[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_CMP_expected_prev);
		$display ("     Real value = %b", REG_CMP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_REG_CMP_exp[6] = REG_CMP_expected_prev[6];
	end
	if (
		( REG_CMP_expected_prev[7] !== 1'bx ) && ( REG_CMP_prev[7] !== REG_CMP_expected_prev[7] )
		&& ((REG_CMP_expected_prev[7] !== last_REG_CMP_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_CMP[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_CMP_expected_prev);
		$display ("     Real value = %b", REG_CMP_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_REG_CMP_exp[7] = REG_CMP_expected_prev[7];
	end
	if (
		( REG_NOT_expected_prev[0] !== 1'bx ) && ( REG_NOT_prev[0] !== REG_NOT_expected_prev[0] )
		&& ((REG_NOT_expected_prev[0] !== last_REG_NOT_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_NOT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_NOT_expected_prev);
		$display ("     Real value = %b", REG_NOT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_REG_NOT_exp[0] = REG_NOT_expected_prev[0];
	end
	if (
		( REG_NOT_expected_prev[1] !== 1'bx ) && ( REG_NOT_prev[1] !== REG_NOT_expected_prev[1] )
		&& ((REG_NOT_expected_prev[1] !== last_REG_NOT_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_NOT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_NOT_expected_prev);
		$display ("     Real value = %b", REG_NOT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_REG_NOT_exp[1] = REG_NOT_expected_prev[1];
	end
	if (
		( REG_NOT_expected_prev[2] !== 1'bx ) && ( REG_NOT_prev[2] !== REG_NOT_expected_prev[2] )
		&& ((REG_NOT_expected_prev[2] !== last_REG_NOT_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_NOT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_NOT_expected_prev);
		$display ("     Real value = %b", REG_NOT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_REG_NOT_exp[2] = REG_NOT_expected_prev[2];
	end
	if (
		( REG_NOT_expected_prev[3] !== 1'bx ) && ( REG_NOT_prev[3] !== REG_NOT_expected_prev[3] )
		&& ((REG_NOT_expected_prev[3] !== last_REG_NOT_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_NOT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_NOT_expected_prev);
		$display ("     Real value = %b", REG_NOT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_REG_NOT_exp[3] = REG_NOT_expected_prev[3];
	end
	if (
		( REG_NOT_expected_prev[4] !== 1'bx ) && ( REG_NOT_prev[4] !== REG_NOT_expected_prev[4] )
		&& ((REG_NOT_expected_prev[4] !== last_REG_NOT_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_NOT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_NOT_expected_prev);
		$display ("     Real value = %b", REG_NOT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_REG_NOT_exp[4] = REG_NOT_expected_prev[4];
	end
	if (
		( REG_NOT_expected_prev[5] !== 1'bx ) && ( REG_NOT_prev[5] !== REG_NOT_expected_prev[5] )
		&& ((REG_NOT_expected_prev[5] !== last_REG_NOT_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_NOT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_NOT_expected_prev);
		$display ("     Real value = %b", REG_NOT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_REG_NOT_exp[5] = REG_NOT_expected_prev[5];
	end
	if (
		( REG_NOT_expected_prev[6] !== 1'bx ) && ( REG_NOT_prev[6] !== REG_NOT_expected_prev[6] )
		&& ((REG_NOT_expected_prev[6] !== last_REG_NOT_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_NOT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_NOT_expected_prev);
		$display ("     Real value = %b", REG_NOT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_REG_NOT_exp[6] = REG_NOT_expected_prev[6];
	end
	if (
		( REG_NOT_expected_prev[7] !== 1'bx ) && ( REG_NOT_prev[7] !== REG_NOT_expected_prev[7] )
		&& ((REG_NOT_expected_prev[7] !== last_REG_NOT_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_NOT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_NOT_expected_prev);
		$display ("     Real value = %b", REG_NOT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_REG_NOT_exp[7] = REG_NOT_expected_prev[7];
	end
	if (
		( REG_OR_expected_prev[0] !== 1'bx ) && ( REG_OR_prev[0] !== REG_OR_expected_prev[0] )
		&& ((REG_OR_expected_prev[0] !== last_REG_OR_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_OR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_OR_expected_prev);
		$display ("     Real value = %b", REG_OR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_REG_OR_exp[0] = REG_OR_expected_prev[0];
	end
	if (
		( REG_OR_expected_prev[1] !== 1'bx ) && ( REG_OR_prev[1] !== REG_OR_expected_prev[1] )
		&& ((REG_OR_expected_prev[1] !== last_REG_OR_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_OR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_OR_expected_prev);
		$display ("     Real value = %b", REG_OR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_REG_OR_exp[1] = REG_OR_expected_prev[1];
	end
	if (
		( REG_OR_expected_prev[2] !== 1'bx ) && ( REG_OR_prev[2] !== REG_OR_expected_prev[2] )
		&& ((REG_OR_expected_prev[2] !== last_REG_OR_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_OR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_OR_expected_prev);
		$display ("     Real value = %b", REG_OR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_REG_OR_exp[2] = REG_OR_expected_prev[2];
	end
	if (
		( REG_OR_expected_prev[3] !== 1'bx ) && ( REG_OR_prev[3] !== REG_OR_expected_prev[3] )
		&& ((REG_OR_expected_prev[3] !== last_REG_OR_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_OR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_OR_expected_prev);
		$display ("     Real value = %b", REG_OR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_REG_OR_exp[3] = REG_OR_expected_prev[3];
	end
	if (
		( REG_OR_expected_prev[4] !== 1'bx ) && ( REG_OR_prev[4] !== REG_OR_expected_prev[4] )
		&& ((REG_OR_expected_prev[4] !== last_REG_OR_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_OR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_OR_expected_prev);
		$display ("     Real value = %b", REG_OR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_REG_OR_exp[4] = REG_OR_expected_prev[4];
	end
	if (
		( REG_OR_expected_prev[5] !== 1'bx ) && ( REG_OR_prev[5] !== REG_OR_expected_prev[5] )
		&& ((REG_OR_expected_prev[5] !== last_REG_OR_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_OR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_OR_expected_prev);
		$display ("     Real value = %b", REG_OR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_REG_OR_exp[5] = REG_OR_expected_prev[5];
	end
	if (
		( REG_OR_expected_prev[6] !== 1'bx ) && ( REG_OR_prev[6] !== REG_OR_expected_prev[6] )
		&& ((REG_OR_expected_prev[6] !== last_REG_OR_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_OR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_OR_expected_prev);
		$display ("     Real value = %b", REG_OR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_REG_OR_exp[6] = REG_OR_expected_prev[6];
	end
	if (
		( REG_OR_expected_prev[7] !== 1'bx ) && ( REG_OR_prev[7] !== REG_OR_expected_prev[7] )
		&& ((REG_OR_expected_prev[7] !== last_REG_OR_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_OR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_OR_expected_prev);
		$display ("     Real value = %b", REG_OR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_REG_OR_exp[7] = REG_OR_expected_prev[7];
	end
	if (
		( REG_SUB_expected_prev[0] !== 1'bx ) && ( REG_SUB_prev[0] !== REG_SUB_expected_prev[0] )
		&& ((REG_SUB_expected_prev[0] !== last_REG_SUB_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_SUB[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_SUB_expected_prev);
		$display ("     Real value = %b", REG_SUB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_REG_SUB_exp[0] = REG_SUB_expected_prev[0];
	end
	if (
		( REG_SUB_expected_prev[1] !== 1'bx ) && ( REG_SUB_prev[1] !== REG_SUB_expected_prev[1] )
		&& ((REG_SUB_expected_prev[1] !== last_REG_SUB_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_SUB[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_SUB_expected_prev);
		$display ("     Real value = %b", REG_SUB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_REG_SUB_exp[1] = REG_SUB_expected_prev[1];
	end
	if (
		( REG_SUB_expected_prev[2] !== 1'bx ) && ( REG_SUB_prev[2] !== REG_SUB_expected_prev[2] )
		&& ((REG_SUB_expected_prev[2] !== last_REG_SUB_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_SUB[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_SUB_expected_prev);
		$display ("     Real value = %b", REG_SUB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_REG_SUB_exp[2] = REG_SUB_expected_prev[2];
	end
	if (
		( REG_SUB_expected_prev[3] !== 1'bx ) && ( REG_SUB_prev[3] !== REG_SUB_expected_prev[3] )
		&& ((REG_SUB_expected_prev[3] !== last_REG_SUB_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_SUB[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_SUB_expected_prev);
		$display ("     Real value = %b", REG_SUB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_REG_SUB_exp[3] = REG_SUB_expected_prev[3];
	end
	if (
		( REG_SUB_expected_prev[4] !== 1'bx ) && ( REG_SUB_prev[4] !== REG_SUB_expected_prev[4] )
		&& ((REG_SUB_expected_prev[4] !== last_REG_SUB_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_SUB[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_SUB_expected_prev);
		$display ("     Real value = %b", REG_SUB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_REG_SUB_exp[4] = REG_SUB_expected_prev[4];
	end
	if (
		( REG_SUB_expected_prev[5] !== 1'bx ) && ( REG_SUB_prev[5] !== REG_SUB_expected_prev[5] )
		&& ((REG_SUB_expected_prev[5] !== last_REG_SUB_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_SUB[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_SUB_expected_prev);
		$display ("     Real value = %b", REG_SUB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_REG_SUB_exp[5] = REG_SUB_expected_prev[5];
	end
	if (
		( REG_SUB_expected_prev[6] !== 1'bx ) && ( REG_SUB_prev[6] !== REG_SUB_expected_prev[6] )
		&& ((REG_SUB_expected_prev[6] !== last_REG_SUB_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_SUB[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_SUB_expected_prev);
		$display ("     Real value = %b", REG_SUB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_REG_SUB_exp[6] = REG_SUB_expected_prev[6];
	end
	if (
		( REG_SUB_expected_prev[7] !== 1'bx ) && ( REG_SUB_prev[7] !== REG_SUB_expected_prev[7] )
		&& ((REG_SUB_expected_prev[7] !== last_REG_SUB_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_SUB[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_SUB_expected_prev);
		$display ("     Real value = %b", REG_SUB_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_REG_SUB_exp[7] = REG_SUB_expected_prev[7];
	end
	if (
		( REG_XOR_expected_prev[0] !== 1'bx ) && ( REG_XOR_prev[0] !== REG_XOR_expected_prev[0] )
		&& ((REG_XOR_expected_prev[0] !== last_REG_XOR_exp[0]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_XOR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_XOR_expected_prev);
		$display ("     Real value = %b", REG_XOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_REG_XOR_exp[0] = REG_XOR_expected_prev[0];
	end
	if (
		( REG_XOR_expected_prev[1] !== 1'bx ) && ( REG_XOR_prev[1] !== REG_XOR_expected_prev[1] )
		&& ((REG_XOR_expected_prev[1] !== last_REG_XOR_exp[1]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_XOR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_XOR_expected_prev);
		$display ("     Real value = %b", REG_XOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_REG_XOR_exp[1] = REG_XOR_expected_prev[1];
	end
	if (
		( REG_XOR_expected_prev[2] !== 1'bx ) && ( REG_XOR_prev[2] !== REG_XOR_expected_prev[2] )
		&& ((REG_XOR_expected_prev[2] !== last_REG_XOR_exp[2]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_XOR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_XOR_expected_prev);
		$display ("     Real value = %b", REG_XOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_REG_XOR_exp[2] = REG_XOR_expected_prev[2];
	end
	if (
		( REG_XOR_expected_prev[3] !== 1'bx ) && ( REG_XOR_prev[3] !== REG_XOR_expected_prev[3] )
		&& ((REG_XOR_expected_prev[3] !== last_REG_XOR_exp[3]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_XOR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_XOR_expected_prev);
		$display ("     Real value = %b", REG_XOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_REG_XOR_exp[3] = REG_XOR_expected_prev[3];
	end
	if (
		( REG_XOR_expected_prev[4] !== 1'bx ) && ( REG_XOR_prev[4] !== REG_XOR_expected_prev[4] )
		&& ((REG_XOR_expected_prev[4] !== last_REG_XOR_exp[4]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_XOR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_XOR_expected_prev);
		$display ("     Real value = %b", REG_XOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_REG_XOR_exp[4] = REG_XOR_expected_prev[4];
	end
	if (
		( REG_XOR_expected_prev[5] !== 1'bx ) && ( REG_XOR_prev[5] !== REG_XOR_expected_prev[5] )
		&& ((REG_XOR_expected_prev[5] !== last_REG_XOR_exp[5]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_XOR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_XOR_expected_prev);
		$display ("     Real value = %b", REG_XOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_REG_XOR_exp[5] = REG_XOR_expected_prev[5];
	end
	if (
		( REG_XOR_expected_prev[6] !== 1'bx ) && ( REG_XOR_prev[6] !== REG_XOR_expected_prev[6] )
		&& ((REG_XOR_expected_prev[6] !== last_REG_XOR_exp[6]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_XOR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_XOR_expected_prev);
		$display ("     Real value = %b", REG_XOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_REG_XOR_exp[6] = REG_XOR_expected_prev[6];
	end
	if (
		( REG_XOR_expected_prev[7] !== 1'bx ) && ( REG_XOR_prev[7] !== REG_XOR_expected_prev[7] )
		&& ((REG_XOR_expected_prev[7] !== last_REG_XOR_exp[7]) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port REG_XOR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", REG_XOR_expected_prev);
		$display ("     Real value = %b", REG_XOR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_REG_XOR_exp[7] = REG_XOR_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DEMUX_REG_vlg_vec_tst();
// constants                                           
// general purpose registers
reg enable;
reg [7:0] IN_REG;
reg s0;
reg s1;
reg s2;
// wires                                               
wire [7:0] REG_ADD;
wire [7:0] REG_AND;
wire [7:0] REG_CMP;
wire [7:0] REG_NOT;
wire [7:0] REG_OR;
wire [7:0] REG_SUB;
wire [7:0] REG_XOR;

wire sampler;                             

// assign statements (if any)                          
DEMUX_REG i1 (
// port map - connection between master ports and signals/registers   
	.enable(enable),
	.IN_REG(IN_REG),
	.REG_ADD(REG_ADD),
	.REG_AND(REG_AND),
	.REG_CMP(REG_CMP),
	.REG_NOT(REG_NOT),
	.REG_OR(REG_OR),
	.REG_SUB(REG_SUB),
	.REG_XOR(REG_XOR),
	.s0(s0),
	.s1(s1),
	.s2(s2)
);

// enable
initial
begin
	enable = 1'b0;
	enable = #80000 1'b1;
	enable = #160000 1'b0;
end 
// IN_REG[ 7 ]
initial
begin
	IN_REG[7] = 1'b0;
end 
// IN_REG[ 6 ]
initial
begin
	IN_REG[6] = 1'b0;
end 
// IN_REG[ 5 ]
initial
begin
	IN_REG[5] = 1'b0;
end 
// IN_REG[ 4 ]
initial
begin
	IN_REG[4] = 1'b0;
end 
// IN_REG[ 3 ]
initial
begin
	IN_REG[3] = 1'b1;
end 
// IN_REG[ 2 ]
initial
begin
	IN_REG[2] = 1'b0;
end 
// IN_REG[ 1 ]
initial
begin
	IN_REG[1] = 1'b1;
end 
// IN_REG[ 0 ]
initial
begin
	IN_REG[0] = 1'b0;
end 

// s0
initial
begin
	s0 = 1'b0;
	s0 = #85000 1'b1;
	# 5000;
	repeat(31)
	begin
		s0 = 1'b0;
		s0 = #5000 1'b1;
		# 5000;
	end
	s0 = 1'b0;
end 

// s1
initial
begin
	s1 = 1'b0;
	s1 = #90000 1'b1;
	# 10000;
	repeat(15)
	begin
		s1 = 1'b0;
		s1 = #10000 1'b1;
		# 10000;
	end
	s1 = 1'b0;
end 

// s2
initial
begin
	s2 = 1'b0;
	s2 = #100000 1'b1;
	# 20000;
	repeat(7)
	begin
		s2 = 1'b0;
		s2 = #20000 1'b1;
		# 20000;
	end
	s2 = 1'b0;
end 

DEMUX_REG_vlg_sample_tst tb_sample (
	.enable(enable),
	.IN_REG(IN_REG),
	.s0(s0),
	.s1(s1),
	.s2(s2),
	.sampler_tx(sampler)
);

DEMUX_REG_vlg_check_tst tb_out(
	.REG_ADD(REG_ADD),
	.REG_AND(REG_AND),
	.REG_CMP(REG_CMP),
	.REG_NOT(REG_NOT),
	.REG_OR(REG_OR),
	.REG_SUB(REG_SUB),
	.REG_XOR(REG_XOR),
	.sampler_rx(sampler)
);
endmodule

